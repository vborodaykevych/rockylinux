name: Build and Push Rocky Linux Images

on:
  push:
    branches:
      - main
  schedule:
    - cron: "0 0 * * *" # Daily builds at midnight UTC

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - amd64
          - arm64
          - ppc64le
          - s390x
        variant:
          - base
          - minimal
        security:
          - root
          - nonroot
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set TAG_SUFFIX
        id: tag_suffix
        run: |
          if [[ "${{ matrix.variant }}" == "base" && "${{ matrix.security }}" == "root" ]]; then
            TAG_SUFFIX="${{ matrix.platform }}"
          else
            TAG_SUFFIX="${{ matrix.platform }}${{ matrix.variant == 'minimal' && '-minimal' || '' }}${{ matrix.security == 'nonroot' && '-nonroot' || '' }}"
          fi
          echo "TAG_SUFFIX=$TAG_SUFFIX" >> $GITHUB_ENV

      - name: Build Initial Image
        run: |
          DOCKERFILE="Dockerfile.${{ matrix.variant }}${{ matrix.security == 'nonroot' && '.nonroot' || '' }}"
          IMAGE_TAG="${{ secrets.DOCKER_USERNAME }}/rockylinux:${TAG_SUFFIX}"

          echo "Building initial image $IMAGE_TAG using $DOCKERFILE..."
          docker buildx build \
            --platform linux/${{ matrix.platform }} \
            --file $DOCKERFILE \
            --tag $IMAGE_TAG \
            --load .

      - name: Extract Filesystem
        run: |
          IMAGE_TAG="${{ secrets.DOCKER_USERNAME }}/rockylinux:${TAG_SUFFIX}"
          echo "Extracting filesystem for $IMAGE_TAG..."
          docker save $IMAGE_TAG -o layer.tar

          mkdir -p extracted /tmp/rootfs
          tar -xf layer.tar -C extracted

          for layer in extracted/blobs/sha256/*; do
            if file "$layer" | grep -q 'tar archive'; then
              tar --skip-old-files -xf "$layer" -C /tmp/rootfs
            fi
          done

          # Fix permissions recursively
          echo "Adjusting permissions in /tmp/rootfs..."
          chmod -R +r /tmp/rootfs || true

          # Verify the filesystem to ensure critical files exist
          echo "Verifying extracted filesystem..."
          if [ ! -f "/tmp/rootfs/bin/bash" ]; then
            echo "Error: /bin/bash not found in the reconstructed filesystem!"
            exit 1
          fi

          # Repackage filesystem into layer.tar.xz
          echo "Repackaging filesystem into layer.tar.xz..."
          tar -cf layer.tar -C /tmp/rootfs .
          xz -z layer.tar

      - name: Build Final Image
        run: |
          FINAL_DOCKERFILE=$(cat <<EOF
          FROM scratch
          ADD layer.tar.xz /
          ${{
            matrix.security == 'nonroot' && 'USER nonroot' || ''
          }}
          CMD ["/bin/bash"]
          EOF
          )

          echo "$FINAL_DOCKERFILE" > FinalDockerfile

          FINAL_TAG="${{ secrets.DOCKER_USERNAME }}/rockylinux:${TAG_SUFFIX}"
          echo "Building final image $FINAL_TAG..."
          docker buildx build \
            --platform linux/${{ matrix.platform }} \
            --file FinalDockerfile \
            --tag $FINAL_TAG \
            --provenance=true \
            --sbom=true \
            --push .

      - name: Extract Minor Version
        id: extract_version
        run: |
          FINAL_TAG="${{ secrets.DOCKER_USERNAME }}/rockylinux:${TAG_SUFFIX}"
          echo "Extracting MINOR_VERSION from $FINAL_TAG..."

          # Extract MINOR_VERSION from /etc/os-release
          MINOR_VERSION=$(docker run --rm $FINAL_TAG cat /etc/os-release | grep VERSION_ID | cut -d '"' -f 2)

          echo "Extracted MINOR_VERSION: $MINOR_VERSION"
          echo $MINOR_VERSION > minor_version.txt

      - name: Upload Minor Version and TAG_SUFFIX
        if: ${{ matrix.platform == 'amd64' && matrix.variant == 'base' && matrix.security == 'root' }}
        uses: actions/upload-artifact@v4
        with:
          name: MINOR_VERSION
          path: minor_version.txt

  create_manifest:
    name: Create Multiarch Manifest
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download MINOR_VERSION Artifact
        uses: actions/download-artifact@v4
        with:
          name: MINOR_VERSION

      - name: Set MINOR_VERSION and MAJOR_VERSION Variables
        run: |
          MINOR_VERSION=$(cat minor_version.txt)
          MAJOR_VERSION=$(echo "${MINOR_VERSION}" | cut -d'.' -f1)
          echo "MINOR_VERSION=$MINOR_VERSION" >> $GITHUB_ENV
          echo "MAJOR_VERSION=$MAJOR_VERSION" >> $GITHUB_ENV
          echo "Using MINOR_VERSION=$MINOR_VERSION and MAJOR_VERSION=$MAJOR_VERSION"
        shell: bash

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create and Push Multiarch Manifests
        run: |
          echo "Creating multiarch manifests for all variant and security combinations..."
          VARIANTS=("base" "minimal")
          VERSIONS=("${MAJOR_VERSION}" "latest" "${MINOR_VERSION}")

          for VARIANT in "${VARIANTS[@]}"; do
            TAG_SUFFIX=""
            [ "$VARIANT" == "minimal" ] && TAG_SUFFIX="-minimal"

            echo "Creating multiarch manifest for rockylinux:nonroot${TAG_SUFFIX}..."
            docker buildx imagetools create \
              --tag ${{ secrets.DOCKER_USERNAME }}/rockylinux:nonroot${TAG_SUFFIX} \
              ${{ secrets.DOCKER_USERNAME }}/rockylinux:amd64${TAG_SUFFIX}-nonroot \
              ${{ secrets.DOCKER_USERNAME }}/rockylinux:arm64${TAG_SUFFIX}-nonroot \
              ${{ secrets.DOCKER_USERNAME }}/rockylinux:ppc64le${TAG_SUFFIX}-nonroot \
              ${{ secrets.DOCKER_USERNAME }}/rockylinux:s390x${TAG_SUFFIX}-nonroot

            for VERSION in "${VERSIONS[@]}"; do
              echo "Creating multiarch manifest for rockylinux:${VERSION}${TAG_SUFFIX}..."
              docker buildx imagetools create \
                --tag ${{ secrets.DOCKER_USERNAME }}/rockylinux:${VERSION}${TAG_SUFFIX} \
                ${{ secrets.DOCKER_USERNAME }}/rockylinux:amd64${TAG_SUFFIX} \
                ${{ secrets.DOCKER_USERNAME }}/rockylinux:arm64${TAG_SUFFIX} \
                ${{ secrets.DOCKER_USERNAME }}/rockylinux:ppc64le${TAG_SUFFIX} \
                ${{ secrets.DOCKER_USERNAME }}/rockylinux:s390x${TAG_SUFFIX}
            done
          done
